name: Prebuild TDLib
on:
  workflow_dispatch:
    inputs:
      tdlib:
        # https://github.com/tdlib/td/search?q=Update+version+to&type=commits
        description: "TDLib git ref (e.g. v1.8.0 or a commit hash)"
        type: string
        required: true

jobs:
  build-linux-x64:
    name: Build TDLib on Linux x86_64 (glibc)
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          repository: "tdlib/td"
          ref: ${{ inputs.tdlib }}
      - name: Install gperf
        run: sudo apt-get install -y -q gperf clang-14 libc++-dev libc++abi-dev tar wget
      - name: Install latest CMake
        run: |
          wget https://github.com/Kitware/CMake/releases/download/v3.30.5/cmake-3.30.5-linux-x86_64.sh 
          chmod +x ./cmake-*.sh
          mkdir cmake
          ./cmake-*.sh --prefix=./cmake --skip-license
          sudo cp -RTv ./cmake /usr/
          cmake --version

      - name: Build TDLib
        run: |
          mkdir -p build && cd build
          cmake  -DCMAKE_CXX_COMPILER=/usr/bin/clang++-14 -DCMAKE_C_COMPILER=/usr/bin/clang-14 \
            -DCMAKE_BUILD_TYPE=Release -DTD_ENABLE_LTO=ON -DCMAKE_INSTALL_PREFIX:PATH=../tdlib \
            -DCMAKE_AR=/usr/bin/llvm-ar-14 -DCMAKE_NM=/usr/bin/llvm-nm-14 \
            -DCMAKE_OBJDUMP=/usr/bin/llvm-objdump-14 -DCMAKE_RANLIB=/usr/bin/llvm-ranlib-14 \
            -DOPENSSL_USE_STATIC_LIBS=TRUE -DZLIB_USE_STATIC_LIBS=TRUE  ..
          cmake --build . --target tdjson -- -j 2
          cd ..
      - name: Strip
        run: strip build/libtdjson.so
      - name: Info
        run: |
          uname -a
          ldd --version
          openssl version
          ldd build/libtdjson.so

      - uses: actions/upload-artifact@v4
        with:
          name: tdlib-linux-x64
          path: build/libtdjson.so
      - name: Get Meta
        run: |
          rm meta.yml -f
          TDLIB_VERSION=`grep -oP "(?<=project\\(TDLib VERSION ).*?(?= LANGUAGES CXX C\\))" CMakeLists.txt`
          TDLIB_COMMIT_HASH=`git rev-parse HEAD`

          echo "version: $TDLIB_VERSION" >> meta.yml
          echo "commit-hash: $TDLIB_COMMIT_HASH" >> meta.yml
      - uses: actions/upload-artifact@v4
        with:
          name: meta
          path: meta.yml
      - uses: actions/upload-artifact@v4
        with:
          name: schema
          path: td/generate/scheme/td_api.tl

  build-linux-arm64:
    name: Build TDLib on Linux arm64
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixpkgs-unstable
      - name: Restore Nix cache
        id: cache
        uses: actions/cache@v3
        with:
          path: /nix/store
          key: ${{ runner.os }}-nix-${{ hashFiles('scripts/*.nix') }}
          restore-keys: |
            ${{ runner.os }}-nix-
      - name: Build TDLib
        run: |
          cd scripts
          ./build-linux.sh ${{ inputs.tdlib }} aarch64-linux-gnu.2.22
      - uses: actions/upload-artifact@v4
        with:
          name: tdlib-linux-arm64
          path: ${{ env.TO_UPLOAD }}

  prebuild-macos:
    name: Build TDLib on macOS
    strategy:
      matrix:
        spec:
          - os: macos-12
            arch: x64
            opt: /usr/local/opt
          - os: macos-14
            arch: arm64
            opt: /opt/homebrew/opt
    runs-on: ${{matrix.spec.os}}
    steps:
      - uses: actions/checkout@v4
        with:
          repository: "tdlib/td"
          ref: ${{ inputs.tdlib }}
      - name: homebrew cache
        uses: actions/cache@v4
        with:
          path: ~/Library/Caches/Homebrew
          key: homebrew-${{github.run_id}}
          restore-keys: |
            homebrew-

      - name: Install dependencies
        run: HOMEBREW_NO_INSTALL_CLEANUP=1 brew install gperf openssl zlib

      - name: CMake version
        run: cmake --version
      - name: Build TDLib
        run: |
          mkdir -p build && cd build
          cmake -DCMAKE_BUILD_TYPE=Release \
            -DTD_ENABLE_LTO=ON \
            -DOPENSSL_ROOT_DIR=${{matrix.spec.opt}}/openssl \
            -DZLIB_INCLUDE_DIR=${{matrix.spec.opt}}/zlib/include \
            -DZLIB_LIBRARY=${{matrix.spec.opt}}/zlib/lib/libz.a \
            -DOPENSSL_USE_STATIC_LIBS=TRUE -DZLIB_USE_STATIC_LIBS=TRUE ..
          cmake --build . --target tdjson -- -j 3
          cd ..
      - name: Info
        run: |
          uname -a
          ${{matrix.spec.opt}}/openssl/bin/openssl version
          otool -L build/libtdjson.dylib
      - uses: actions/upload-artifact@v4
        with:
          name: tdlib-macos-${{matrix.spec.arch}}
          path: build/libtdjson.dylib

  build-windows:
    name: Build TDLib on Windows
    runs-on: windows-2022
    strategy:
      matrix:
        build:
          - arch: x86
            cmake_arch: Win32
          - arch: x64
            cmake_arch: x64
    steps:
      - uses: actions/checkout@v4
        with:
          repository: "tdlib/td"
          ref: ${{ inputs.tdlib }}
      - name: vcpkg cache
        uses: actions/cache@v4
        with:
          path: '~\AppData\Local\vcpkg\archives'
          key: vcpkg-${{ github.run_id }}
          restore-keys: |
            vcpkg-

      - name: Update
        run: vcpkg update
      - name: Install dependencies using vcpkg
        run: vcpkg install gperf:${{matrix.build.arch}}-windows-static openssl:${{matrix.build.arch}}-windows-static zlib:${{matrix.build.arch}}-windows-static

      - name: CMake version
        run: cmake --version
      - name: Build TDLib
        shell: pwsh
        run: |
          mkdir build
          cd build
          cmake -A ${{matrix.build.cmake_arch}} `
            -DCMAKE_TOOLCHAIN_FILE=C:\vcpkg\scripts\buildsystems\vcpkg.cmake `
            -DVCPKG_TARGET_TRIPLET=${{matrix.build.arch}}-windows-static `
            -DOPENSSL_USE_STATIC_LIBS=TRUE -DZLIB_USE_STATIC_LIBS=TRUE ..
          cmake --build . --target tdjson --config Release --parallel 2
          cd ..
        # It should be possible to print the dependencies using dumpbin.exe
      - uses: actions/upload-artifact@v4
        with:
          name: tdlib-windows-${{matrix.build.arch}}
          path: build\Release\tdjson.dll

  # build-wasm:
  #   name: Build TDLib for Web
  #   runs-on: ubuntu-22.04
  #   steps:
  #     - name: Install gperf
  #       run: sudo apt-get install -y -q gperf clang-14 libc++-dev libc++abi-dev tar wget
  #     - name: Install latest CMake
  #       run: |
  #         wget https://github.com/Kitware/CMake/releases/download/v3.25.0/cmake-3.25.0-linux-x86_64.sh
  #         chmod +x ./cmake-*.sh
  #         mkdir cmake
  #         ./cmake-*.sh --prefix=./cmake --skip-license
  #         sudo cp -RTv ./cmake /usr/
  #         cmake --version
  #     - uses: actions/checkout@v4
  #       with:
  #         repository: "tdlib/td"
  #         ref: ${{ inputs.tdlib }}

  #     - name: Build for WASM
  #       run: |
  #         git clone https://github.com/emscripten-core/emsdk.git
  #         cd emsdk
  #         git pull
  #         ./emsdk install latest
  #         ./emsdk activate latest
  #         source ./emsdk_env.sh
  #         cd ..

  #         cd example/web
  #         ./build-openssl.sh
  #         ./build-tdlib.sh
  #         ./copy-tdlib.sh
  #     - uses: actions/upload-artifact@v4
  #       with:
  #         name: tdlib-wasm
  #         path: example/web/tdweb/src/prebuilt/release/*

  build-macos:
    name: Create universal macOS shared library
    needs: [prebuild-macos]
    runs-on: macos-13
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: tdlib-macos-*
      - name: Combine shared libraries
        run: |
          mkdir -p to-upload
          lipo tdlib-macos-x64/libtdjson.dylib tdlib-macos-arm64/libtdjson.dylib \
            -output to-upload/libtdjson.dylib -create
          cd to-upload
          file libtdjson.dylib
          otool -L libtdjson.dylib
      - uses: actions/upload-artifact@v4
        with:
          name: tdlib-macos
          path: to-upload

  build-linux-docker-musl:
    name: Built TDLib on Linux (musl)

    strategy:
      matrix:
        arch: [amd64, arm64]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{matrix.arch}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image
        uses: docker/build-push-action@v6
        with:
          push: false
          platforms: linux/${{matrix.arch}}
          build-args: GIT_REF=${{ inputs.tdlib }}
          tags: tdlib:build
          file: ./scripts/Dockerfile.musl
          load: true

      - name: Run Container and Copy Result
        run: |
          mkdir -p result
          container_id=$(docker create tdlib:build)
          docker cp $container_id:/result/libtdjson.so ./result/
          docker rm $container_id

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: tdlib-linux-${{matrix.arch}}-musl
          path: ./result/libtdjson.so

  dist:
    name: Bundle artifacts to dist
    runs-on: ubuntu-22.04
    needs:
      [
        build-linux-x64,
        build-linux-arm64,
        prebuild-macos,
        build-windows,
        build-macos,
        build-linux-docker-musl
      ]

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          registry-url: "https://registry.npmjs.org"
      - uses: actions/download-artifact@v4
        with:
          path: td

      - name: List arifacts
        run: ls td

      - name: Get npm cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

      - uses: actions/cache@v4
        id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - run: npm ci
      - run: |
          cd td
          mv tdlib-macos-x64/libtdjson.dylib ./libtdjson-x64.dylib
          mv tdlib-macos-arm64/libtdjson.dylib ./libtdjson-arm64.dylib
          mv tdlib-macos/libtdjson.dylib ./libtdjson-universal.dylib
          mv tdlib-linux-x64/libtdjson.so ./libtdjson-x64-glibc.so
          mv tdlib-linux-arm64/libtdjson.so ./libtdjson-arm64-glibc.so
          mv tdlib-linux-x64-musl/libtdjson.so ./libtdjson-x64-musl.so
          mv tdlib-linux-arm64-musl/libtdjson.so ./libtdjson-arm64-musl.so
          mv tdlib-windows-x64/tdjson.dll ./tdjson-x64.dll
          mv tdlib-windows-x86/tdjson.dll ./tdjson-x32.dll
          mv meta/meta.yml ./
          mv schema/td_api.tl ./

      - uses: actions/upload-artifact@v4
        with:
          name: td
          path: td/*

      - run: node scripts/prepack-binary.js
      - run: npm run build:types
      - name: Create pull request
        uses: peter-evans/create-pull-request@v5
        with:
          branch: tdlib-update
          title: Update tdlib to ${{ inputs.tdlib }}
